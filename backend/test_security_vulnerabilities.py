"""
Testes de Seguran√ßa - Vulnerabilidades B√°sicas
Identifica e testa vulnerabilidades cr√≠ticas de seguran√ßa
"""

import os
import django
import unittest
import json
import re
from django.test import TestCase, Client
from django.contrib.auth.models import User
from django.urls import reverse
from django.conf import settings
from django.db import connection
from unittest.mock import patch, MagicMock

# Setup Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'nossa_grana.settings')
django.setup()

from transactions.models import Transaction
from financial_accounts.models import Account
from accounts.models import UserProfile


class SecurityVulnerabilityTests(TestCase):
    """Testes para identificar vulnerabilidades b√°sicas de seguran√ßa"""
    
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(
            username='testuser',
            email='test@test.com',
            password='testpass123'
        )
        self.account = Account.objects.create(
            user=self.user,
            name='Test Account',
            type='checking',
            initial_balance=1000.00
        )
    
    def test_sql_injection_vulnerabilities(self):
        """Testa vulnerabilidades de SQL Injection"""
        print("\nüîç Testando SQL Injection...")
        
        # Payloads de SQL Injection comuns
        sql_payloads = [
            "'; DROP TABLE transactions; --",
            "' OR '1'='1",
            "' UNION SELECT * FROM auth_user --",
            "'; DELETE FROM financial_accounts; --",
            "' OR 1=1 --",
            "admin'--",
            "admin'/*",
            "' OR 'x'='x",
            "'; INSERT INTO transactions VALUES (1,1,1000,'hack'); --"
        ]
        
        vulnerabilities_found = []
        
        for payload in sql_payloads:
            try:
                # Teste em par√¢metros de busca
                response = self.client.get('/api/transactions/', {
                    'search': payload,
                    'description': payload
                })
                
                # Verifica se houve erro de SQL ou comportamento suspeito
                if response.status_code == 500:
                    vulnerabilities_found.append(f"SQL Injection poss√≠vel em search: {payload}")
                
                # Teste em dados POST
                response = self.client.post('/api/transactions/', {
                    'description': payload,
                    'amount': '100.00',
                    'account': self.account.id
                })
                
                if response.status_code == 500:
                    vulnerabilities_found.append(f"SQL Injection poss√≠vel em POST: {payload}")
                    
            except Exception as e:
                if "syntax error" in str(e).lower() or "sql" in str(e).lower():
                    vulnerabilities_found.append(f"SQL Error com payload: {payload}")
        
        if vulnerabilities_found:
            print(f"‚ùå VULNERABILIDADES SQL INJECTION ENCONTRADAS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Nenhuma vulnerabilidade SQL Injection √≥bvia encontrada")
        
        return vulnerabilities_found
    
    def test_xss_vulnerabilities(self):
        """Testa vulnerabilidades de Cross-Site Scripting (XSS)"""
        print("\nüîç Testando XSS...")
        
        xss_payloads = [
            "<script>alert('XSS')</script>",
            "<img src=x onerror=alert('XSS')>",
            "javascript:alert('XSS')",
            "<svg onload=alert('XSS')>",
            "';alert('XSS');//",
            "<iframe src=javascript:alert('XSS')></iframe>",
            "<body onload=alert('XSS')>",
            "<input onfocus=alert('XSS') autofocus>",
            "<<SCRIPT>alert('XSS')</SCRIPT>"
        ]
        
        vulnerabilities_found = []
        
        for payload in xss_payloads:
            try:
                # Teste em descri√ß√£o de transa√ß√£o
                response = self.client.post('/api/transactions/', {
                    'description': payload,
                    'amount': '100.00',
                    'account': self.account.id
                })
                
                if response.status_code == 201:
                    # Verifica se o payload foi armazenado sem sanitiza√ß√£o
                    transaction = Transaction.objects.filter(description=payload).first()
                    if transaction:
                        vulnerabilities_found.append(f"XSS Stored poss√≠vel: {payload}")
                
                # Teste em par√¢metros GET
                response = self.client.get('/api/transactions/', {'search': payload})
                if payload in response.content.decode():
                    vulnerabilities_found.append(f"XSS Reflected poss√≠vel: {payload}")
                    
            except Exception as e:
                pass
        
        if vulnerabilities_found:
            print(f"‚ùå VULNERABILIDADES XSS ENCONTRADAS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Nenhuma vulnerabilidade XSS √≥bvia encontrada")
        
        return vulnerabilities_found
    
    def test_authentication_bypass(self):
        """Testa tentativas de bypass de autentica√ß√£o"""
        print("\nüîç Testando Bypass de Autentica√ß√£o...")
        
        vulnerabilities_found = []
        
        # Teste de acesso sem autentica√ß√£o
        protected_endpoints = [
            '/api/transactions/',
            '/api/accounts/',
            '/api/budgets/',
            '/api/goals/',
            '/api/reports/'
        ]
        
        for endpoint in protected_endpoints:
            response = self.client.get(endpoint)
            if response.status_code == 200:
                vulnerabilities_found.append(f"Endpoint desprotegido: {endpoint}")
        
        # Teste de manipula√ß√£o de headers
        headers_tests = [
            {'HTTP_X_FORWARDED_FOR': '127.0.0.1'},
            {'HTTP_X_REAL_IP': '127.0.0.1'},
            {'HTTP_X_FORWARDED_USER': 'admin'},
            {'HTTP_AUTHORIZATION': 'Bearer fake_token'},
            {'HTTP_X_USER_ID': '1'}
        ]
        
        for headers in headers_tests:
            response = self.client.get('/api/transactions/', **headers)
            if response.status_code == 200:
                vulnerabilities_found.append(f"Poss√≠vel bypass via headers: {headers}")
        
        if vulnerabilities_found:
            print(f"‚ùå VULNERABILIDADES DE AUTENTICA√á√ÉO ENCONTRADAS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Nenhuma vulnerabilidade de autentica√ß√£o √≥bvia encontrada")
        
        return vulnerabilities_found
    
    def test_authorization_flaws(self):
        """Testa falhas de autoriza√ß√£o (IDOR)"""
        print("\nüîç Testando Falhas de Autoriza√ß√£o...")
        
        # Criar outro usu√°rio
        other_user = User.objects.create_user(
            username='otheruser',
            email='other@test.com',
            password='otherpass123'
        )
        other_account = Account.objects.create(
            user=other_user,
            name='Other Account',
            type='checking',
            initial_balance=500.00
        )
        
        # Login como primeiro usu√°rio
        self.client.login(username='testuser', password='testpass123')
        
        vulnerabilities_found = []
        
        # Teste IDOR - tentar acessar recursos de outro usu√°rio
        idor_tests = [
            f'/api/accounts/{other_account.id}/',
            f'/api/transactions/?account={other_account.id}',
        ]
        
        for endpoint in idor_tests:
            response = self.client.get(endpoint)
            if response.status_code == 200:
                vulnerabilities_found.append(f"IDOR poss√≠vel: {endpoint}")
        
        # Teste de modifica√ß√£o de recursos de outro usu√°rio
        response = self.client.put(f'/api/accounts/{other_account.id}/', {
            'name': 'Hacked Account',
            'balance': '999999.99'
        }, content_type='application/json')
        
        if response.status_code in [200, 204]:
            vulnerabilities_found.append("IDOR: Modifica√ß√£o de conta de outro usu√°rio")
        
        if vulnerabilities_found:
            print(f"‚ùå VULNERABILIDADES DE AUTORIZA√á√ÉO ENCONTRADAS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Nenhuma vulnerabilidade de autoriza√ß√£o √≥bvia encontrada")
        
        return vulnerabilities_found
    
    def test_sensitive_data_exposure(self):
        """Testa exposi√ß√£o de dados sens√≠veis"""
        print("\nüîç Testando Exposi√ß√£o de Dados Sens√≠veis...")
        
        vulnerabilities_found = []
        
        # Teste de informa√ß√µes em responses
        response = self.client.get('/api/accounts/')
        if response.status_code == 200:
            content = response.content.decode()
            
            # Procura por dados sens√≠veis que n√£o deveriam estar expostos
            sensitive_patterns = [
                r'password',
                r'secret',
                r'token',
                r'key',
                r'hash',
                r'salt',
                r'csrf',
                r'session'
            ]
            
            for pattern in sensitive_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    vulnerabilities_found.append(f"Poss√≠vel exposi√ß√£o de dados sens√≠veis: {pattern}")
        
        # Teste de debug information
        if settings.DEBUG:
            vulnerabilities_found.append("DEBUG=True em produ√ß√£o (exposi√ß√£o de informa√ß√µes)")
        
        # Teste de stack traces
        response = self.client.get('/api/nonexistent/')
        if response.status_code == 500 and 'Traceback' in response.content.decode():
            vulnerabilities_found.append("Stack traces expostos em erros 500")
        
        if vulnerabilities_found:
            print(f"‚ùå EXPOSI√á√ÉO DE DADOS SENS√çVEIS ENCONTRADA:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Nenhuma exposi√ß√£o √≥bvia de dados sens√≠veis encontrada")
        
        return vulnerabilities_found
    
    def test_csrf_protection(self):
        """Testa prote√ß√£o contra CSRF"""
        print("\nüîç Testando Prote√ß√£o CSRF...")
        
        vulnerabilities_found = []
        
        # Teste POST sem CSRF token
        response = self.client.post('/api/transactions/', {
            'description': 'Test Transaction',
            'amount': '100.00',
            'account': self.account.id
        })
        
        # Se a requisi√ß√£o passou sem CSRF token, h√° vulnerabilidade
        if response.status_code in [200, 201]:
            vulnerabilities_found.append("CSRF: POST aceito sem token CSRF")
        
        # Teste com CSRF token inv√°lido
        self.client.cookies['csrftoken'] = 'invalid_token'
        response = self.client.post('/api/transactions/', {
            'description': 'Test Transaction',
            'amount': '100.00',
            'account': self.account.id,
            'csrfmiddlewaretoken': 'invalid_token'
        })
        
        if response.status_code in [200, 201]:
            vulnerabilities_found.append("CSRF: POST aceito com token inv√°lido")
        
        if vulnerabilities_found:
            print(f"‚ùå VULNERABILIDADES CSRF ENCONTRADAS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Prote√ß√£o CSRF funcionando corretamente")
        
        return vulnerabilities_found
    
    def test_rate_limiting(self):
        """Testa rate limiting"""
        print("\nüîç Testando Rate Limiting...")
        
        vulnerabilities_found = []
        
        # Teste de m√∫ltiplas requisi√ß√µes r√°pidas
        responses = []
        for i in range(50):  # 50 requisi√ß√µes r√°pidas
            response = self.client.get('/api/transactions/')
            responses.append(response.status_code)
        
        # Se todas as requisi√ß√µes passaram, pode n√£o haver rate limiting
        if all(status == 200 for status in responses):
            vulnerabilities_found.append("Rate Limiting: Muitas requisi√ß√µes aceitas sem limita√ß√£o")
        
        # Teste de login brute force
        login_attempts = []
        for i in range(20):
            response = self.client.post('/api/auth/login/', {
                'username': 'admin',
                'password': f'wrong_password_{i}'
            })
            login_attempts.append(response.status_code)
        
        if not any(status == 429 for status in login_attempts):
            vulnerabilities_found.append("Rate Limiting: Login brute force n√£o limitado")
        
        if vulnerabilities_found:
            print(f"‚ùå PROBLEMAS DE RATE LIMITING ENCONTRADOS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Rate limiting funcionando adequadamente")
        
        return vulnerabilities_found
    
    def test_input_validation(self):
        """Testa valida√ß√£o de entrada"""
        print("\nüîç Testando Valida√ß√£o de Entrada...")
        
        vulnerabilities_found = []
        
        # Teste de valores extremos
        extreme_values = [
            {'amount': '999999999999999999999.99'},  # Valor muito alto
            {'amount': '-999999999.99'},  # Valor negativo
            {'amount': 'abc'},  # N√£o num√©rico
            {'description': 'A' * 10000},  # String muito longa
            {'description': ''},  # String vazia
            {'account': '999999'},  # ID inexistente
            {'account': 'abc'},  # ID n√£o num√©rico
        ]
        
        for test_data in extreme_values:
            response = self.client.post('/api/transactions/', {
                'description': test_data.get('description', 'Test'),
                'amount': test_data.get('amount', '100.00'),
                'account': test_data.get('account', self.account.id)
            })
            
            # Se dados inv√°lidos foram aceitos
            if response.status_code in [200, 201]:
                vulnerabilities_found.append(f"Valida√ß√£o falhou para: {test_data}")
        
        if vulnerabilities_found:
            print(f"‚ùå PROBLEMAS DE VALIDA√á√ÉO ENCONTRADOS:")
            for vuln in vulnerabilities_found:
                print(f"   - {vuln}")
        else:
            print("‚úÖ Valida√ß√£o de entrada funcionando corretamente")
        
        return vulnerabilities_found
    
    def run_all_security_tests(self):
        """Executa todos os testes de seguran√ßa"""
        print("üîí INICIANDO TESTES DE SEGURAN√áA - VULNERABILIDADES B√ÅSICAS")
        print("=" * 60)
        
        all_vulnerabilities = []
        
        # Executa todos os testes
        all_vulnerabilities.extend(self.test_sql_injection_vulnerabilities())
        all_vulnerabilities.extend(self.test_xss_vulnerabilities())
        all_vulnerabilities.extend(self.test_authentication_bypass())
        all_vulnerabilities.extend(self.test_authorization_flaws())
        all_vulnerabilities.extend(self.test_sensitive_data_exposure())
        all_vulnerabilities.extend(self.test_csrf_protection())
        all_vulnerabilities.extend(self.test_rate_limiting())
        all_vulnerabilities.extend(self.test_input_validation())
        
        # Relat√≥rio final
        print("\n" + "=" * 60)
        print("üìä RELAT√ìRIO FINAL DE SEGURAN√áA")
        print("=" * 60)
        
        if all_vulnerabilities:
            print(f"‚ùå TOTAL DE VULNERABILIDADES ENCONTRADAS: {len(all_vulnerabilities)}")
            print("\nüö® VULNERABILIDADES CR√çTICAS:")
            for i, vuln in enumerate(all_vulnerabilities, 1):
                print(f"{i:2d}. {vuln}")
            
            print("\nüîß RECOMENDA√á√ïES IMEDIATAS:")
            print("1. Implementar sanitiza√ß√£o adequada de inputs")
            print("2. Configurar rate limiting robusto")
            print("3. Revisar controles de autoriza√ß√£o")
            print("4. Implementar valida√ß√£o rigorosa de dados")
            print("5. Configurar headers de seguran√ßa")
            print("6. Desabilitar DEBUG em produ√ß√£o")
            
        else:
            print("‚úÖ NENHUMA VULNERABILIDADE CR√çTICA ENCONTRADA")
            print("Sistema passou nos testes b√°sicos de seguran√ßa")
        
        return all_vulnerabilities


def run_security_tests():
    """Fun√ß√£o para executar os testes de seguran√ßa"""
    import django
    from django.test.utils import get_runner
    from django.conf import settings
    
    django.setup()
    TestRunner = get_runner(settings)
    test_runner = TestRunner()
    
    # Executa apenas os testes de seguran√ßa
    test_suite = unittest.TestLoader().loadTestsFromTestCase(SecurityVulnerabilityTests)
    
    # Cria uma inst√¢ncia do teste para executar manualmente
    security_test = SecurityVulnerabilityTests()
    security_test.setUp()
    
    return security_test.run_all_security_tests()


if __name__ == '__main__':
    vulnerabilities = run_security_tests()
    
    if vulnerabilities:
        print(f"\nüö® A√á√ÉO NECESS√ÅRIA: {len(vulnerabilities)} vulnerabilidades encontradas!")
        exit(1)
    else:
        print("\n‚úÖ Testes de seguran√ßa conclu√≠dos com sucesso!")
        exit(0)